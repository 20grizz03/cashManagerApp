package methodsForSummary

import (
	"cachManagerApp/app/db/models"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForExpenses"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForIncomeAnalys"
	"cachManagerApp/database"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	summary = models.Summary{}
)

// –∞–Ω–∞–ª–∏–∑ —Å–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é
func AnalyseBySaldoWeek(update tgbotapi.Update) (models.Summary, error) {
	analyticExpenses := methodsForExpenses.ExpensesHandler{DB: database.DB}
	analyticIncomes := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}

	if database.DB == nil {
		return models.Summary{}, fmt.Errorf("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∞–ª—å–¥–æ –∑–∞ –Ω–µ–¥–µ–ª—é")
	}

	totalWeekExpenses, err := analyticExpenses.ExpenseWeekAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	totalWeekIncomes, err := analyticIncomes.IncomeWeekAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	// –ø–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö –¥–æ—Ö–æ–¥–æ–≤
	for category, amount := range totalWeekIncomes {
		summary.TotalIncome += amount
		summary.IncomeCategories = append(summary.IncomeCategories, models.CategorySummary{Category: category, Amount: amount})

		if amount > summary.TopIncome.Amount {
			summary.TopIncome = models.CategorySummary{
				Category: category,
				Amount:   amount,
			}
		}
	}

	for category, amount := range totalWeekExpenses {
		summary.TotalExpense += amount
		summary.ExpenseCategories = append(summary.ExpenseCategories, models.CategorySummary{Category: category, Amount: amount})

		if amount > summary.TopExpense.Amount {
			summary.TopExpense = models.CategorySummary{
				Category: category,
				Amount:   amount,
			}
		}
	}

	summary.Profit = int64(summary.TotalIncome) - int64(summary.TotalExpense)
	return summary, nil
}

func GenerateWeeklySaldoReport(sum models.Summary) string {
	report := "üìä –í–∞—à –∞–Ω–∞–ª–∏–∑ –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"

	// —Ä–∞—Å—Ö–æ–¥—ã
	report += "üí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
	if len(sum.ExpenseCategories) > 0 {
		for _, category := range sum.ExpenseCategories {
			report += fmt.Sprintf("   ‚ñ™ %s: %d\n", category.Category, category.Amount)
		}
		report += fmt.Sprintf("\nüî¥ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s (%d)\n", sum.TopExpense.Category, sum.TopExpense.Amount)
	} else {
		report += "   ‚ñ™ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.\n"
	}

	// –î–æ—Ö–æ–¥—ã
	report += "\nüíµ –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
	if len(sum.IncomeCategories) > 0 {
		for _, category := range sum.IncomeCategories {
			report += fmt.Sprintf("   ‚ñ™ %s: %d\n", category.Category, category.Amount)
		}
		report += fmt.Sprintf("\nüü¢ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s (%d)\n", sum.TopIncome.Category, sum.TopIncome.Amount)
	} else {
		report += "   ‚ñ™ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é.\n"
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —É–±—ã—Ç–æ–∫
	if sum.Profit >= 0 {
		report += fmt.Sprintf("\n‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –Ω–µ–¥–µ–ª—é: %d\n", sum.Profit)
	} else {
		report += fmt.Sprintf("\n‚ùå –ò—Ç–æ–≥–æ–≤—ã–π —É–±—ã—Ç–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: %d\n", -sum.Profit)
	}

	return report
}

// –∞–Ω–∞–ª–∏–∑ —Å–∞–ª—å–¥–æ –∑–∞ –º–µ—Å—è—Ü
func AnalyseBySaldoMonth(update tgbotapi.Update) (models.Summary, error) {
	analyticExpenses := methodsForExpenses.ExpensesHandler{DB: database.DB}
	analyticIncomes := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}

	if database.DB == nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Å–∞–ª—å–¥–æ")
	}

	totalExpenses, err := analyticExpenses.ExpenseMonthAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
	}
	totalIncomes, err := analyticIncomes.IncomeMonthAnalytic(update)
	if err != nil {
		return models.Summary{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–æ–≤")
	}

	for category, amount := range totalExpenses {
		summary.TotalExpense += amount
		summary.ExpenseCategories = append(summary.ExpenseCategories, models.CategorySummary{category, amount})
		if amount > summary.TopExpense.Amount {
			summary.TopExpense = models.CategorySummary{category, amount}
		}
	}

	for category, amount := range totalIncomes {
		summary.TotalIncome += amount
		summary.IncomeCategories = append(summary.IncomeCategories, models.CategorySummary{category, amount})
		if amount > summary.TopIncome.Amount {
			summary.TopIncome = models.CategorySummary{category, amount}
		}
	}

	summary.Profit = int64(summary.TotalIncome) - int64(summary.TotalExpense)
	return summary, nil
}

func GenerateMonthlySaldoReport(sum models.Summary) string {
	report := "üìä –í–∞—à –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü:\n\n"

	// —Ä–∞—Å—Ö–æ–¥—ã
	report += "üí∏ –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
	if len(sum.ExpenseCategories) > 0 {
		for _, category := range sum.ExpenseCategories {
			report += fmt.Sprintf("   ‚ñ™ %s: %d\n", category.Category, category.Amount)
		}
		report += fmt.Sprintf("\nüî¥ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s (%d)\n", sum.TopExpense.Category, sum.TopExpense.Amount)
	} else {
		report += "   ‚ñ™ –ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.\n"
	}

	// –î–æ—Ö–æ–¥—ã
	report += "\nüíµ –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
	if len(sum.IncomeCategories) > 0 {
		for _, category := range sum.IncomeCategories {
			report += fmt.Sprintf("   ‚ñ™ %s: %d\n", category.Category, category.Amount)
		}
		report += fmt.Sprintf("\nüü¢ –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s (%d)\n", sum.TopIncome.Category, sum.TopIncome.Amount)
	} else {
		report += "   ‚ñ™ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü.\n"
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∏–ª–∏ —É–±—ã—Ç–æ–∫
	if sum.Profit >= 0 {
		report += fmt.Sprintf("\n‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: %d\n", sum.Profit)
	} else {
		report += fmt.Sprintf("\n‚ùå –ò—Ç–æ–≥–æ–≤—ã–π —É–±—ã—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü: %d\n", -sum.Profit)
	}

	return report
}
