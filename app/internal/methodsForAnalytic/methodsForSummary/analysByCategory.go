package methodsForSummary

import (
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForExpenses"
	"cachManagerApp/app/internal/methodsForAnalytic/methodsForIncomeAnalys"
	"cachManagerApp/database"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –Ω–µ–¥–µ–ª—é
// –í–ó–Ø–¢–¨ –í–°–Æ –°–£–ú–ú–£ –î–û–•–û–î–û–í(–†–ê–°–•–û–î–û–í), –ü–†–ï–î–°–¢–ê–í–ò–¢–¨ –í –í–ò–î–ï 100% –∏ –ü–û–°–ß–ò–¢–ê–¢–¨ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤–∫—É –∫–∞–∂–¥–æ–π –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–æ—Ç–∞–ª–∞
// –≤—ã–≤–µ—Å—Ç–∏ –¥–≤–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –∏ –ª–µ–≥–µ–Ω–¥—É –∫ –Ω–∏–º –≥–¥–µ –±—É–¥—É—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ –Ω—É–ª–µ–≤—ã—Ö —Å % –∏(–∏–ª–∏) –æ–±—â–∏–º–∏ —Å—É–º–º–∞–º–∏ –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –ø–∏—Ä–æ–≥–∞ –∏–∑ –≥—Ä–∞—Ñ–∏–∫–æ–≤
// –Ω–∞–¥–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —ç—Ç–æ, –∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–ª—é—Ç—É
// —É–±—Ä–∞—Ç—å —Ç–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–Ω–∏ –∏–º–µ—é—Ç—Å—è –≤ —Å–∞–ª—å–¥–æ, –Ω–µ –∑–∞—á–µ–º –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è
func AnalyseByCategoriesWeek(update tgbotapi.Update) (string, error) {

	if database.DB == nil {
		return "", fmt.Errorf("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	}

	analyticExpenses := methodsForExpenses.ExpensesHandler{DB: database.DB}
	analyticIncomes := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}

	totalWeekExpenses, err := analyticExpenses.ExpenseWeekAnalytic(update)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	totalWeekIncomes, err := analyticIncomes.IncomeWeekAnalytic(update)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–∞–º–∏
	var topExpenseCategory string
	var maxExpense uint64

	var topIncomeCategory string
	var maxIncome uint64

	// –°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ø–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	for category, amount := range totalWeekExpenses {
		if amount > maxExpense {
			maxExpense = amount
			topExpenseCategory = category
		}
	}
	// –°—É–º–º–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ø–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	for category, amount := range totalWeekIncomes {
		if amount > maxIncome {
			maxIncome = amount
			topIncomeCategory = category
		}
	}
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	report := fmt.Sprintf("%s –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º\n\n", update.Message.Chat.LastName)

	// –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	if len(totalWeekExpenses) > 0 {
		report += "üí∏ –í—ã –∂–∞–¥–Ω–æ —Ç—Ä–∞—Ç–∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
		for category := range totalWeekExpenses {
			report += fmt.Sprintf("   ‚ñ™ %s\n", category)
		}
		report += fmt.Sprintf("\nüò± –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s - %d\n", topExpenseCategory, maxExpense)
	} else {
		report += "üí∏ –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
	}

	report += "\n"

	// –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	if len(totalWeekIncomes) > 0 {
		report += "üíµ –í—ã –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
		for category, _ := range totalWeekIncomes {
			report += fmt.Sprintf("   ‚ñ™ %s\n", category)
		}
		report += fmt.Sprintf("\nü§ë –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s - %d\n", topIncomeCategory, maxIncome)
	} else {
		report += "üíµ –î–æ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
	}
	return report, nil
}

// –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –º–µ—Å—è—Ü
func AnalyseByCategoriesMonth(update tgbotapi.Update) (string, error) {

	if database.DB == nil {
		return "", fmt.Errorf("–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	}

	analyticExpenses := methodsForExpenses.ExpensesHandler{DB: database.DB}
	analyticIncomes := methodsForIncomeAnalys.AnalyticHandler{DB: database.DB}

	totalMonthExpenses, err := analyticExpenses.ExpenseMonthAnalytic(update)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	totalMonthIncomes, _, err := analyticIncomes.IncomeMonthAnalytic(update)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ—Ö–æ–¥–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–∞–º–∏
	var topExpenseCategory string
	var maxExpense uint64

	var topIncomeCategory string
	var maxIncome uint64

	// –°—É–º–º–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ø–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	for category, amount := range totalMonthExpenses {
		if amount > maxExpense {
			maxExpense = amount
			topExpenseCategory = category
		}
	}
	// –°—É–º–º–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–æ–ø–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
	for category, amount := range totalMonthIncomes {
		if amount > maxIncome {
			maxIncome = amount
			topIncomeCategory = category
		}
	}
	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	report := "üìä –í–∞—à –∞–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n\n"

	// –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	if len(totalMonthExpenses) > 0 {
		report += "üí∏ –í—ã –∂–∞–¥–Ω–æ —Ç—Ä–∞—Ç–∏–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
		for category := range totalMonthExpenses {
			report += fmt.Sprintf("   ‚ñ™ %s\n", category)
		}
		report += fmt.Sprintf("\nüò± –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s - %d\n", topExpenseCategory, maxExpense)
	} else {
		report += "üí∏ –†–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–µ—Å—è—Ü –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.\n"
	}

	report += "\n"

	// –î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
	if len(totalMonthIncomes) > 0 {
		report += "üíµ –í—ã –±–µ–∑–∂–∞–ª–æ—Å—Ç–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
		for category := range totalMonthIncomes {
			report += fmt.Sprintf("   ‚ñ™ %s\n", category)
		}
		report += fmt.Sprintf("\nü§ë –ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: %s - %d\n", topIncomeCategory, maxIncome)
	} else {
		report += "üíµ –î–æ—Ö–æ–¥–æ–≤ –Ω–µ—Ç\n"
	}
	return report, nil
}
