package methodsForExpenses

import (
	"cachManagerApp/app/db/models"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"gorm.io/gorm"
	"log"
	"time"
)

type ExpensesHandler struct {
	DB *gorm.DB
}

// —Ö–µ–Ω–¥–ª–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
//
//go:generate mockery --name=ExpenseAnalyticHandler --output=../tests/mocks --with-expecter
type ExpenseAnalyticHandler interface {
	ExpenseDayAnalytic(update tgbotapi.Update) ([]models.Transactions, error)
	ExpenseWeekAnalytic(update tgbotapi.Update) (map[string]uint64, error)
	ExpenseMonthAnalytic(update tgbotapi.Update) (map[string]uint64, error)
}

// —Ä–∞—Å—Ö–æ–¥ –∑–∞ –¥–µ–Ω—å
func (exp *ExpensesHandler) ExpenseDayAnalytic(update tgbotapi.Update) ([]models.Transactions, error) {
	now := time.Now()
	startOfDay := time.Date(now.Year(), now.Month(), now.Day(), 0, 0, 0, 0, time.Local)
	endOfDay := startOfDay.Add(24 * time.Hour)

	var transactions []models.Transactions
	err := exp.DB.Where("telegram_id = ? AND operation_type = ? AND created_at BETWEEN ? AND ?",
		update.Message.Chat.ID, false, startOfDay, endOfDay).Find(&transactions).Error
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –¥–µ–Ω—å: %v", err)
	}

	return transactions, nil
}

func GenerateDailyExpenseReport(expenses []models.Transactions, currency string) string {
	if len(expenses) == 0 {
		return "üìâ –°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ –±—ã–ª–æ —Ä–∞—Å—Ö–æ–¥–æ–≤."
	}

	report := "üìâ –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å:\n\n"
	var totalExpenses uint64

	for _, exp := range expenses {
		report += fmt.Sprintf("‚ñ™ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\n", exp.Category)
		report += fmt.Sprintf("   –°—É–º–º–∞: %d\n", exp.Quantities)
		if exp.Description != "" {
			report += fmt.Sprintf("   –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: %s\n", exp.Description)
		}
		report += "\n"
		totalExpenses += exp.Quantities
	}
	report += fmt.Sprintf("üí∏ –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –¥–µ–Ω—å: %d %s\n", totalExpenses, currency)
	return report
}

// —Ä–∞—Å—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é
func (exp *ExpensesHandler) ExpenseWeekAnalytic(update tgbotapi.Update) (map[string]uint64, error) {
	now := time.Now()
	startDay := now.AddDate(0, 0, -7)
	endDay := now

	var result []struct {
		Category string
		Value    uint64
	}

	err := exp.DB.Model(&models.Transactions{}).
		Select("category, SUM (quantities) as value").
		Where("telegram_id = ? AND operation_type = ? AND created_at BETWEEN ? AND ?",
			update.Message.Chat.ID, false, startDay, endDay).
		Group("category").
		Scan(&result).Error
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é: %v", err)
	}

	categorySummary := make(map[string]uint64)
	for _, item := range result {
		categorySummary[item.Category] += item.Value
	}
	return categorySummary, nil
}

func GenerateWeeklyExpensesReport(categorySummary map[string]uint64, currency string) string {
	if len(categorySummary) == 0 {
		return "üìä –ó–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é —Ä–∞—Å—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
	}

	report := "üìä –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"
	totalExpense := uint64(0)

	for category, total := range categorySummary {
		report += fmt.Sprintf("‚ñ™ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s ‚Äî –†–∞—Å—Ö–æ–¥: %d\n", category, total)
		totalExpense += total
	}

	report += fmt.Sprintf("\nüí∏ –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∑–∞ –Ω–µ–¥–µ–ª—é —Å–æ—Å—Ç–∞–≤–∏–ª: %d %s", totalExpense, currency)
	return report
}

// —Ä–∞—Å—Ö–æ–¥ –∑–∞ –º–µ—Å—è—Ü
func (exp *ExpensesHandler) ExpenseMonthAnalytic(update tgbotapi.Update) (map[string]uint64, error) {

	now := time.Now()
	startOfMonth := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location())
	endOfMonth := startOfMonth.AddDate(0, 1, 0).Add(-time.Second) // –ö–æ–Ω–µ—Ü –º–µ—Å—è—Ü–∞

	var results []struct {
		Category string
		Value    uint64
	}

	err := exp.DB.Model(&models.Transactions{}).
		Select("category, SUM(quantities) as value").
		Where("telegram_id = ? AND operation_type = ? AND created_at BETWEEN ? AND ?",
			update.Message.Chat.ID, false, startOfMonth, endOfMonth). // –¢–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
		Group("category").
		Scan(&results).Error

	log.Printf("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞ –∑–∞ –º–µ—Å—è—Ü: %+v", results) // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –º–µ—Å—è—Ü: %v", err)
	}

	categorySummary := make(map[string]uint64)
	for _, item := range results {
		categorySummary[item.Category] += item.Value
	}
	return categorySummary, nil
}

func GenerateMonthlyExpensesReport(categorySummary map[string]uint64, currency string) string {
	categoryDetails := map[string]string{
		"–ë—ã—Ç–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã":       "üîµ",
		"–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏":  "üî¥",
		"–û–¥–µ–∂–¥–∞":              "üü°",
		"–ó–¥–æ—Ä–æ–≤—å–µ":            "üü¢",
		"–î–æ—Å—É–≥ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "üü†",
		"–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":          "üü£",
		"–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã":      "‚ö™Ô∏è",
	}

	if len(categorySummary) == 0 {
		return "üìä –ó–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –º–µ—Å—è—Ü —Ä–∞—Å—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç."
	}

	// –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥
	totalExpense := uint64(0)
	for _, value := range categorySummary {
		totalExpense += value
	}

	report := "üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n\n"

	for category, value := range categorySummary {
		// —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã
		percentage := (float64(value) / float64(totalExpense)) * 100

		// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç—á—ë—Ç–∞
		if emoji, exists := categoryDetails[category]; exists {
			report += fmt.Sprintf("%s %s: %d (%d%%)\n", emoji, category, value, int(percentage))
		} else {
			report += fmt.Sprintf("%s: %d (%d%%)\n", category, value, int(percentage))
		}
	}

	// —Ñ–∏–Ω–∏—à
	report += fmt.Sprintf("\nüí∏ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: %d %s", totalExpense, currency)

	return report
}
