package TgBot

import (
	"cachManagerApp/app/internal/methodsForUser"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
func PushOnButton(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator TelegramButtonCreator) {
	if update.Message != nil {
		handled := false // —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞

		switch update.Message.Text {

		// –û–ü–ò–°–ê–ù–ò–ï –ö–ù–û–ü–û–ö –ú–ï–ù–Æ
		case "üì• –ü—Ä–∏—Ö–æ–¥":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì• –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for income: %v", err)
			}
			handled = true

		case "üì§ –†–∞—Å—Ö–æ–¥":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for expense: %v", err)
			}
			handled = true

		case "üìä –û—Ç—á–µ—Ç—ã":
			reportMenu := buttonCreator.CreateReportsMenuButtons()
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
			msg.ReplyMarkup = reportMenu
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for reports: %v", err)
			}
			handled = true

		case "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			settingsMenu := buttonCreator.CreateSettingsMenuButtons()
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
			msg.ReplyMarkup = settingsMenu
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for settings: %v", err)
			}
			handled = true

		case "‚¨Ö –í –º–µ–Ω—é":
			mainMenu := buttonCreator.CreateMainMenuButtons()
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
			msg.ReplyMarkup = mainMenu
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send main menu: %v", err)
			}
			handled = true

		// –û–ü–ò–°–ê–ù–ò–ï –ò–ù–õ–ê–ô–ù –ö–û–ú–ú–ê–ù–î
		case "/info":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìç –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:\n ‚ñ™ –í–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n ‚ñ™ –°–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n ‚ñ™ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send /info message: %v", err)
			}
			handled = true

		case "/help":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞") // –¥–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö—ç–ª–ø
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send /help message: %v", err)
			}
			handled = true

		case "/hi":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, randomTextForHi()) // –¥–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö—ç–ª–ø
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send /help message: %v", err)
			}
			handled = true

		case "üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send /help message: %v", err)
			}
			user := methodsForUser.UserMethod{}
			user.WaitingUpdate = true

			handled = true
		}

		// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
		if !handled {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send unknown command message: %v", err)
			}
		}
	}
}
