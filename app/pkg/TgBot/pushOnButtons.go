package TgBot

import (
	"cachManagerApp/app/pkg/logger"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"sync"
)

type TransactionResponse struct {
	Action string `json:"action"`
}

type UserResponse struct {
	Action string `json:"action"`
}

var (
	log               = logger.GetLogger()
	userStates        = make(map[int64]UserResponse)        // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	mu                sync.Mutex                            // –º—å—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–ø–µ
	transactionStates = make(map[int64]TransactionResponse) // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

)

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—é–¥–∞)
func PushOnButton(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator TelegramButtonCreator) {
	if update.Message != nil {
		// —á–∞—Ç ID –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è
		chatID := update.Message.Chat.ID
		mu.Lock()
		val2, ok2 := transactionStates[chatID]
		val, ok := userStates[chatID]
		mu.Unlock()

		if ok2 && val2.Action != "" {
			handleTransactionAction(bot, update, val2)
			return
		}

		// –µ—Å–ª–∏ –≤ –Ω–µ–π –ª–µ–∂–∏—Ç –∫–ª—é—á, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∂–¥–µ—Ç –æ—Ç–∫–ª–∏–∫–∞
		if ok && val.Action != "" {
			handleUserAction(bot, update, val)
			return
		}
		handleButtonPress(bot, update, buttonCreator)
	}
}

func handleButtonPress(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator TelegramButtonCreator) {
	chatID := update.Message.Chat.ID
	handled := false
	switch update.Message.Text {

	// –û–ü–ò–°–ê–ù–ò–ï –ö–ù–û–ü–û–ö –ú–ï–ù–Æ
	case "üì• –ü—Ä–∏—Ö–æ–¥":
		incomeMenu := buttonCreator.CreateIncomeMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
		msg.ReplyMarkup = incomeMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for income: %v", err)
		}
		handled = true

	case "üì§ –†–∞—Å—Ö–æ–¥":
		expensesMenu := buttonCreator.CreateExpensesMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
		msg.ReplyMarkup = expensesMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for expense: %v", err)
		}
		handled = true

	case "üìä –û—Ç—á–µ—Ç—ã":
		reportMenu := buttonCreator.CreateReportsMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
		msg.ReplyMarkup = reportMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for reports: %v", err)
		}
		handled = true

	case "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		settingsMenu := buttonCreator.CreateSettingsMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
		msg.ReplyMarkup = settingsMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for settings: %v", err)
		}
		handled = true

	case "‚¨Ö –í –º–µ–Ω—é":
		mainMenu := buttonCreator.CreateMainMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		msg.ReplyMarkup = mainMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send main menu: %v", err)
		}
		handled = true

	// –û–ü–ò–°–ê–ù–ò–ï –ò–ù–õ–ê–ô–ù –ö–û–ú–ú–ê–ù–î
	case "/info":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìç –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:\n ‚ñ™ –í–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n ‚ñ™ –°–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n ‚ñ™ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /info message: %v", err)
		}
		handled = true
	// –¥–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö—ç–ª–ø!!!!!!
	case "/help":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		handled = true

	case "/hi":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, randomTextForHi()) // –¥–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö—ç–ª–ø
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		handled = true

	// –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –¢–ì
	case "üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		userStates[chatID] = UserResponse{Action: "change_name"}
		mu.Unlock()
		handled = true

	case "üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		userStates[chatID] = UserResponse{Action: "change_currency"}
		mu.Unlock()
		handled = true

		// –ø—Ä–∏—Ö–æ–¥—ã
	case "üì• –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã.\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "salary"}
		mu.Unlock()
		handled = true

	case "üì§ –ü–æ–±–æ—á–Ω—ã–π –¥–æ—Ö–æ–¥":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞\n(–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, —Ñ—Ä–∏–ª–∞–Ω—Å).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "additional_income"}
		mu.Unlock()
		handled = true

	case "üì• –î–æ—Ö–æ–¥ –æ—Ç –±–∏–∑–Ω–µ—Å–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –æ—Ç –±–∏–∑–Ω–µ—Å–∞.\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "business_income"}
		mu.Unlock()
		handled = true

	case "üì• –î–æ—Ö–æ–¥ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ –æ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n(–ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥–∞–º, –¥–∏–≤–∏–¥–µ–Ω–¥—ã).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "investment_income"}
		mu.Unlock()
		handled = true

	case "üì• –ì–æ—Å.–≤—ã–ø–ª–∞—Ç—ã":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç\n(–ø–µ–Ω—Å–∏–∏, —Å—É–¥—Å–∏–¥–∏–∏).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "state_payments"}
		mu.Unlock()
		handled = true

	case "üì§ –ü—Ä–æ–¥–∞–∂–∞ –∏–º—É—â–µ—Å—Ç–≤–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–∞–∂–∏ –∏–º—É—â–µ—Å—Ç–≤–∞.\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "property_sales"}
		mu.Unlock()
		handled = true

	case "üì• –ü—Ä–æ—á–µ–µ":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—á–∏—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π.\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "other_income"}
		mu.Unlock()
		handled = true

		// —Ä–∞—Å—Ö–æ–¥–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
	case "üì§ –ë—ã—Ç–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–∞—Ç\n(–µ–¥–∞, –Ω–∞–ø–∏—Ç–∫–∏, –ø—Ä–æ–µ–∑–¥).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "basic_expense"}
		mu.Unlock()
		handled = true

	case "üì§ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n(–∫—Ä–µ–¥–∏—Ç—ã, –Ω–∞–ª–æ–≥–∏, –∞—Ä–µ–Ω–¥–∞,\n–∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "regular_expense"}
		mu.Unlock()
		handled = true

	case "üì§ –û–¥–µ–∂–¥–∞":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞—Ç –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞—Ä–¥–µ—Ä–æ–±–∞.\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "clothes"}
		mu.Unlock()
		handled = true

	case "üì§ –ó–¥–æ—Ä–æ–≤—å–µ":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è\n(–∞–ø—Ç–µ–∫–∏, –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –≤–∏–∑–∏—Ç—ã –∫ –≤—Ä–∞—á–∞–º).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "health"}
		mu.Unlock()
		handled = true

	case "üì§ –î–æ—Å—É–≥ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞\n(–∫–Ω–∏–≥–∏, –ø–æ–¥–ø–∏—Å–∫–∏, –∫—É—Ä—Å—ã, —Ö–æ–±–±–∏,\n –º—É–∑–µ–∏, –∫–∏–Ω–æ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "leisure_education"}
		mu.Unlock()
		handled = true

	case "üì§ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω—É—é –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n(–≤–∫–ª–∞–¥—ã, –∞–∫—Ü–∏–∏, –∞–≤—Ç–æ–º–æ–±–∏–ª–∏,\n–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å, –ø—Ä–µ–¥–º–µ—Ç—ã —Ä–æc–∫–æ—à–∏).\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "investment_expense"}
		mu.Unlock()
		handled = true

	case "üì§ –ü—Ä–æ—á–µ–µ":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ—á–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤\n–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		transactionStates[chatID] = TransactionResponse{Action: "other_expense"}
		mu.Unlock()
		handled = true
	}

	// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	if !handled {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send unknown command message: %v", err)
		}
	}
}
