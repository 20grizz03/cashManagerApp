package TgBot

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
)

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
func PushOnButton(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	if update.Message != nil {
		switch update.Message.Text {
		case "–ü—Ä–∏—Ö–æ–¥":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì• –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for income: %v", err)
			}

		case "–†–∞—Å—Ö–æ–¥":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for expense: %v", err)
			}

		case "–û—Ç—á–µ—Ç—ã":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for reports: %v", err)
			}

		case "–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for settings: %v", err)
			}

		default:
			// –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É—Ä–∞–∫–∞
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message for unknown command: %v", err)
			}
		}
	}

	if update.CallbackQuery != nil {
		// –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ (–ø–æ–∫–∞ –¥–≤–µ)
		switch update.CallbackQuery.Data {
		case "info":
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –±–æ—Ç–∞\n") // –≤–æ—Ç —ç—Ç–æ –ø–æ –∏–¥–µ–µ –º–æ–∂–Ω–æ –∑–∞—Ç–µ—Ä–µ—Ç—å, –º–Ω–µ –ø–æ—Ç–µ—Å—Ç–∏—Ç—å –Ω–µ –Ω–∞ —á–µ–º
			if _, err := bot.Request(callback); err != nil {
				log.Printf("Failed to send callback response: %v", err)
			}
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:\n1. –í–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n2. –°–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n3. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message with bot functions: %v", err)
			}

		case "help":
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞") // –≤–æ—Ç —ç—Ç–æ –ø–æ –∏–¥–µ–µ –º–æ–∂–Ω–æ –∑–∞—Ç–µ—Ä–µ—Ç—å, –º–Ω–µ –ø–æ—Ç–µ—Å—Ç–∏—Ç—å –Ω–µ –Ω–∞ —á–µ–º
			if _, err := bot.Request(callback); err != nil {
				log.Printf("Failed to send callback response: %v", err)
			}
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ") // –¥–æ–ø–∏—Å–∞—Ç—å help, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —á–µ–º!
			if _, err := bot.Send(msg); err != nil {
				log.Printf("Failed to send message with help info: %v", err)
			}
		}
	}
}
