package TgBot

import (
	"cachManagerApp/app/internal/methodsForUser"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"sync"
)

type UserResponse struct {
	Action string `json:"action"`
}

var (
	userStates = make(map[int64]UserResponse) // –º–∞–ø–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	mu         sync.Mutex                     // –º—å—é—Ç–µ–∫—Å –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞–ø–µ
)

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—é–¥–∞)
func PushOnButton(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator TelegramButtonCreator) {
	if update.Message != nil {
		// —á–∞—Ç ID –Ω–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è
		chatID := update.Message.Chat.ID
		mu.Lock()

		val, ok := userStates[chatID]
		mu.Unlock()
		// –µ—Å–ª–∏ –≤ –Ω–µ–π –ª–µ–∂–∏—Ç –∫–ª—é—á, —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –¥–µ–π—Å—Ç–≤–∏—é, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –∂–¥–µ—Ç –æ—Ç–∫–ª–∏–∫–∞
		if ok && val.Action != "" {
			handleUserAction(bot, update, val)
			return
		}
		handleButtonPress(bot, update, buttonCreator)
	}
}

func handleButtonPress(bot *tgbotapi.BotAPI, update tgbotapi.Update, buttonCreator TelegramButtonCreator) {
	chatID := update.Message.Chat.ID
	handled := false
	switch update.Message.Text {

	// –û–ü–ò–°–ê–ù–ò–ï –ö–ù–û–ü–û–ö –ú–ï–ù–Æ
	case "üì• –ü—Ä–∏—Ö–æ–¥":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì• –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–∏—Ö–æ–¥–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for income: %v", err)
		}
		handled = true

	case "üì§ –†–∞—Å—Ö–æ–¥":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì§ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for expense: %v", err)
		}
		handled = true

	case "üìä –û—Ç—á–µ—Ç—ã":
		reportMenu := buttonCreator.CreateReportsMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞")
		msg.ReplyMarkup = reportMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for reports: %v", err)
		}
		handled = true

	case "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		settingsMenu := buttonCreator.CreateSettingsMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚öô –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
		msg.ReplyMarkup = settingsMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message for settings: %v", err)
		}
		handled = true

	case "‚¨Ö –í –º–µ–Ω—é":
		mainMenu := buttonCreator.CreateMainMenuButtons()
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		msg.ReplyMarkup = mainMenu
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send main menu: %v", err)
		}
		handled = true

	// –û–ü–ò–°–ê–ù–ò–ï –ò–ù–õ–ê–ô–ù –ö–û–ú–ú–ê–ù–î
	case "/info":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìç –ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è:\n ‚ñ™ –í–µ–¥–µ–Ω–∏—è —É—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤\n ‚ñ™ –°–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n ‚ñ™ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /info message: %v", err)
		}
		handled = true

	case "/help":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n/help - –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞") // –¥–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö—ç–ª–ø
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		handled = true

	case "/hi":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, randomTextForHi()) // –¥–æ–ø–∏—Å–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ö—ç–ª–ø
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		handled = true

	// –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞ –¢–ì
	case "üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è":
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send /help message: %v", err)
		}
		mu.Lock()
		userStates[chatID] = UserResponse{Action: "change_name"}
		mu.Unlock()
		handled = true
	}

	// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
	if !handled {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send unknown command message: %v", err)
		}
	}
}

func handleUserAction(bot *tgbotapi.BotAPI, update tgbotapi.Update, userResp UserResponse) {
	chatID := update.Message.Chat.ID

	switch userResp.Action {
	case "income":
		amount := update.Message.Text
		msg := tgbotapi.NewMessage(chatID, "–°—É–º–º–∞ –ø—Ä–∏—Ö–æ–¥–∞ "+amount+" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–∏—Ö–æ–¥–µ: %v", err)
		}

	case "change_name":
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
		user := methodsForUser.UserMethod{}
		if err := user.UpdateUserName(update); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			return
		}
		msg := tgbotapi.NewMessage(chatID, "–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: %v", err)
		}
	}

	mu.Lock()
	delete(userStates, chatID) // —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
	mu.Unlock()
}
